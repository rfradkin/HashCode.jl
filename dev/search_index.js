var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = HashCode","category":"page"},{"location":"#HashCode","page":"Home","title":"HashCode","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for HashCode.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HashCode]","category":"page"},{"location":"#HashCode.CarPath","page":"Home","title":"HashCode.CarPath","text":"CarPath\n\nA structure representing the path and travel information of a car in the city.\n\nFields:\n\ncarNum (Int): The unique identifier for the car.\npath (Vector{Int}): Vector representing the path of the car, starting with an initial junction.\ntimeTraveled (Int): The total time traveled by the car.\n\nConstructor:\n\nCarPath(carNum::Int): Creates a new CarPath object with the specified car number.\ncarNum: The unique identifier for the car.\n\n\n\n\n\n","category":"type"},{"location":"#HashCode.CityMap","page":"Home","title":"HashCode.CityMap","text":"CityMap\n\nA structure representing the map of a city, including information about nodes (junctions), edges (streets), cars, and visited junctions.\n\nFields:\n\nnodes (Vector{Junction}): Vector of junctions in the city.\nedges (Vector{Street}): Vector of streets connecting junctions.\ncars (Vector{CarPath}): Vector of car paths representing the movement of cars.\nvisitedJuncs (Vector{Int}): Vector of visited junctions.\n\nConstructors:\n\nCityMap(junctions::Vector{Junction}, streets::Vector{Street}): Creates a new CityMap with the given junctions and streets.\njunctions: Vector of Junction objects.\nstreets: Vector of Street objects.\n\nMethods:\n\nnewFunc(): Returns the string \"hi\".\n\n\n\n\n\n","category":"type"},{"location":"#HashCode.addCarMove-Tuple{HashCode.CityMap, Int64, Int64, Int64}","page":"Home","title":"HashCode.addCarMove","text":"addCarMove(cityMap::CityMap, carNum::Int, juncNum::Int, timeAdded::Int)\n\nUpdates the city map to reflect a car's movement by adding a new junction to its path and updating its total travel time.\n\nParameters:\n\ncityMap (CityMap): The map of the city containing information about cars and visited junctions.\ncarNum (Int): The index of the car making the move.\njuncNum (Int): The junction number to be added to the car's path.\ntimeAdded (Int): The time added to the car's total travel time.\n\nReturns:\n\nNothing\n\n\n\n\n\n","category":"method"},{"location":"#HashCode.alreadyVisited-Tuple{HashCode.CityMap, Int64}","page":"Home","title":"HashCode.alreadyVisited","text":"alreadyVisited(cityMap::CityMap, juncNum::Int)\n\nChecks if a junction has already been visited in the city map.\n\nParameters:\n\ncityMap (CityMap): The map of the city containing information about visited junctions.\njuncNum (Int): The junction number to check for.\n\nReturns:\n\nBool: True if the junction has already been visited, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#HashCode.custom_walk-Tuple{Random.AbstractRNG, HashCode2014.City}","page":"Home","title":"HashCode.custom_walk","text":"custom_walk(rng, city)\n\nPerforms a custom walk to generate itineraries for vehicles in a given city.\n\nParameters:\n\nrng (AbstractRNG): The random number generator.\ncity (City): The city information containing details such as total duration, number of cars, starting junction, and streets.\n\nReturns:\n\nSolution: A solution object containing generated itineraries for each car.\n\n\n\n\n\n","category":"method"},{"location":"#HashCode.getCarLocation-Tuple{HashCode.CarPath}","page":"Home","title":"HashCode.getCarLocation","text":"getCarLocation(car::CarPath)\n\nGets the current location of a car based on its path.\n\nParameters:\n\ncar (CarPath): The car path object containing information about the car's path.\n\nReturns:\n\nAny: The current location of the car.\n\n\n\n\n\n","category":"method"},{"location":"#HashCode.getCarLocation-Tuple{HashCode.CityMap, Int64}","page":"Home","title":"HashCode.getCarLocation","text":"getCarLocation(cityMap::CityMap, carNum::Int)\n\nGets the current location of a specified car in the city map.\n\nParameters:\n\ncityMap (CityMap): The map of the city containing information about cars.\ncarNum (Int): The index of the car for which to retrieve the location.\n\nReturns:\n\nAny: The current location of the specified car.\n\n\n\n\n\n","category":"method"},{"location":"#HashCode.getPosJuncs-Tuple{HashCode.CityMap, Int64}","page":"Home","title":"HashCode.getPosJuncs","text":"getPosJuncs(cityMap::CityMap, curJunc::Int)\n\nFinds the possible junctions and their durations reachable from the given current junction in a city map.\n\nParameters:\n\ncityMap (CityMap): The map of the city containing information about edges.\ncurJunc (Int): The current junction from which to find possible next junctions.\n\nReturns:\n\nVector{Tuple{Int, Int}}: A vector of tuples representing possible next junctions and their corresponding durations.\n\n\n\n\n\n","category":"method"}]
}
